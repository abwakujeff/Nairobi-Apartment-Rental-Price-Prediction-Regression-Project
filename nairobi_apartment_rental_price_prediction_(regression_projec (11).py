# -*- coding: utf-8 -*-
"""Nairobi Apartment Rental Price Prediction (Regression Projec.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s9IILcDxtWpQRUSylpKVfMl1brDv_okT

#Nairobi Apartment Rental Price Prediction (Regression Projec

This notebook demonstrates an end-to-end regression project to predict property prices in Nairobi. We load the provided dataset, clean and preprocess it, perform exploratory analysis, engineer features, and train multiple models (Linear Regression, Random Forest, XGBoost) to compare their performance.   
 We evaluate each model using regression metrics (R², RMSE, MAE) and save the best model. Throughout, we add clear comments and structure it as a portfolio-ready Colab notebook.

#1. Data Loading and Inspection
"""

# Import core libraries
import pandas as pd
import numpy as np

# Load the dataset
df = pd.read_csv('Nairobi propertyprices - Sheet1.csv')

# Inspect the first rows and basic info
df.head()

# Check dataset shape and column types
print(f"Dataset shape: {df.shape}")
df.info()

"""#2. Data Cleaning and Preprocessing

We perform several cleaning steps:
* Clean Price: Remove currency (“KSh”), commas, and spaces, then convert to numeric. This matches known issues in this dataset
medium.com
.
* Convert area units: Standardize House size and Land size to numeric values in square meters. For example, we extract digits from “230 m²” or “0.5 acres” and convert acres to m² (1 acre = 4046.86 m²)
medium.com
.
* Handle missing values: Many Vacant Land entries have no bedrooms or bathrooms. We fill missing numeric values with 0 (since a land plot has no bedroom/bathroom) and 0 for missing house/land sizes accordingly.

* Encode categorical features: Convert propertyType and Location into numeric dummy/indicator variables. Categorical encoding is an essential feature-engineering step so that ML models can use these attributes
"""

# Copy original data to avoid modifying it directly
data = df.copy()

# 2.1 Clean the Price column: remove 'KSh', commas, spaces, convert to float
data['Price'] = data['Price'].astype(str).str.replace('KSh', '', case=False)
data['Price'] = data['Price'].str.replace(',', '').str.replace(' ', '')
data['Price'] = pd.to_numeric(data['Price'], errors='coerce')

# 2.2 Standardize area units
# Extract numeric part of Land size, convert acres to sqm
land_num = data['Land size'].astype(str).str.extract(r'(\d+\.?\d*)')
land_num = pd.to_numeric(land_num[0], errors='coerce')
data['Land size (sqm)'] = land_num * 4046.86  # convert acres to sqm
data.drop(columns=['Land size'], inplace=True)

# Extract numeric part of House size (in m²)
house_num = data['House size'].astype(str).str.extract(r'(\d+\.?\d*)')
data['House size (sqm)'] = pd.to_numeric(house_num[0], errors='coerce')
data.drop(columns=['House size'], inplace=True)

# 2.3 Handle missing bedrooms/bathrooms by setting Vacant Land entries to zero
data['Bedroom'] = data['Bedroom'].fillna(0)
data['bathroom'] = data['bathroom'].fillna(0)

# 2.4 Optional: Create a combined total area feature (house + land)
data['Total area (sqm)'] = data['House size (sqm)'].fillna(0) + data['Land size (sqm)'].fillna(0)

# 2.5 Encode categorical variables (one-hot encoding)
data = pd.get_dummies(data, columns=['propertyType', 'Location'], drop_first=True)

# 2.6 Drop any remaining rows with missing target or features (if any)
data = data.dropna(subset=['Price'])
data.info()

"""#3. Exploratory Data Analysis (EDA)

We now explore the data to understand distributions and relationships
ibm.com
* EDA helps spot patterns, anomalies, and guide modeling. We might plot:
Price distribution (histogram) to see range and skew.
* Price by property type (boxplot or bar chart of median price) to compare types.
* Price vs. area (scatterplot of Price against House size (sqm) or Total area) to see if larger homes cost more.
* Correlation matrix for numeric features to identify strong linear relationships.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Example: Histogram of Price
plt.figure(figsize=(8,4))
sns.histplot(data['Price'], bins=30, kde=True)
plt.title('Distribution of Property Prices')
plt.xlabel('Price (KSh)')
plt.ylabel('Count')
plt.show()

# Example: Boxplot of Price by propertyType (using original df for labels)
plt.figure(figsize=(8,5))
sns.boxplot(x=df['propertyType'], y=data['Price'])
plt.xticks(rotation=45)
plt.title('Price by Property Type')
plt.xlabel('Property Type')
plt.ylabel('Price (KSh)')
plt.show()

# Example: Scatter of Price vs Total area (sqm)
plt.figure(figsize=(6,5))
sns.scatterplot(x=data['Total area (sqm)'], y=data['Price'])
plt.title('Price vs Total Area')
plt.xlabel('Total Area (sqm)')
plt.ylabel('Price (KSh)')
plt.show()

# Correlation heatmap for numeric features (R² potentially hints strongest predictors)
numeric_cols = ['Bedroom','bathroom','House size (sqm)','Land size (sqm)','Total area (sqm)']
corr = data[numeric_cols + ['Price']].corr()
plt.figure(figsize=(6,5))
sns.heatmap(corr, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Feature Correlations')
plt.show()

"""#4. Feature Engineering & Selection

From EDA and domain knowledge, we select relevant features. We already created:
* Bedrooms and Bathrooms (numeric).
* House size (sqm) and Land size (sqm) (numeric).
* Total area (sqm) as combined feature.
* One-hot variables for each propertyType and Location category.*
"""

# Define target and features
X = data.drop(columns=['Price'])
y = data['Price']

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

